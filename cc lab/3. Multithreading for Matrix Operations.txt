### 3. Multithreading for Matrix Operations Using Pthreads

This program multiplies two matrices using multiple threads.

```c
#include <pthread.h>
#include <stdio.h>
#include <stdlib.h>

#define SIZE 3

int A[SIZE][SIZE], B[SIZE][SIZE], C[SIZE][SIZE];

void* multiply(void* arg) {
    int row = *(int*)arg;
    for (int i = 0; i < SIZE; i++) {
        C[row][i] = 0;
        for (int j = 0; j < SIZE; j++) {
            C[row][i] += A[row][j] * B[j][i];
        }
    }
    free(arg);
    return NULL;
}

int main() {
    // Initialize matrices A and B
    for (int i = 0; i < SIZE; i++)
        for (int j = 0; j < SIZE; j++) {
            A[i][j] = i + j;
            B[i][j] = i * j;
        }
    
    // Create threads for each row
    pthread_t threads[SIZE];
    for (int i = 0; i < SIZE; i++) {
        int* row = malloc(sizeof(int));
        *row = i;
        pthread_create(&threads[i], NULL, multiply, row);
    }

    // Join threads
    for (int i = 0; i < SIZE; i++) {
        pthread_join(threads[i], NULL);
    }

    // Print result matrix C
    printf("Result matrix C:\n");
    for (int i = 0; i < SIZE; i++) {
        for (int j = 0; j < SIZE; j++) {
            printf("%d ", C[i][j]);
        }
        printf("\n");
    }
    return 0;
}
