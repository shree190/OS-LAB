5. Producer-Consumer Problem Using Threads and Mutex
This example demonstrates the producer-consumer problem using a mutex lock.
c
Copy code
#include <pthread.h>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>

#define BUFFER_SIZE 5
int buffer[BUFFER_SIZE];
int count = 0;
pthread_mutex_t mutex;

void* producer(void* arg) {
    while (1) {
        pthread_mutex_lock(&mutex);
        if (count < BUFFER_SIZE) {
            buffer[count] = rand() % 100;
            printf("Produced: %d\n", buffer[count]);
            count++;
        }
        pthread_mutex_unlock(&mutex);
        sleep(1);
    }
}

void* consumer(void* arg) {
    while (1) {
        pthread_mutex_lock(&mutex);
        if (count > 0) {
            count--;
            printf("Consumed: %d\n", buffer[count]);
        }
        pthread_mutex_unlock(&mutex);
        sleep(1);
    }
}

int main() {
    pthread_t prod, cons;
    pthread_mutex_init(&mutex, NULL);

    pthread_create(&prod, NULL, producer, NULL);
    pthread_create(&cons, NULL, consumer, NULL);

    pthread_join(prod, NULL);
    pthread_join(cons, NULL);

    pthread_mutex_destroy(&mutex);
    return 0;
}
