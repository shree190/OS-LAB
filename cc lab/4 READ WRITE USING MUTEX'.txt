4. Reader-Writer Problem Using Threads and Mutex

This demonstrates a solution to the reader-writer problem using mutex locks.

```c
#include <pthread.h>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>

int read_count = 0;
pthread_mutex_t mutex, write_lock;

void* reader(void* arg) {
    pthread_mutex_lock(&mutex);
    read_count++;
    if (read_count == 1)
        pthread_mutex_lock(&write_lock);
    pthread_mutex_unlock(&mutex);

    printf("Reader %d is reading\n", *((int*)arg));
    sleep(1);

    pthread_mutex_lock(&mutex);
    read_count--;
    if (read_count == 0)
        pthread_mutex_unlock(&write_lock);
    pthread_mutex_unlock(&mutex);
    return NULL;
}

void* writer(void* arg) {
    pthread_mutex_lock(&write_lock);
    printf("Writer %d is writing\n", *((int*)arg));
    sleep(2);
    pthread_mutex_unlock(&write_lock);
    return NULL;
}

int main() {
    pthread_t readers[5], writers[5];
    int ids[5];

    pthread_mutex_init(&mutex, NULL);
    pthread_mutex_init(&write_lock, NULL);

    for (int i = 0; i < 5; i++) {
        ids[i] = i + 1;
        pthread_create(&readers[i], NULL, reader, &ids[i]);
        pthread_create(&writers[i], NULL, writer, &ids[i]);
    }

    for (int i = 0; i < 5; i++) {
        pthread_join(readers[i], NULL);
        pthread_join(writers[i], NULL);
    }

    pthread_mutex_destroy(&mutex);
    pthread_mutex_destroy(&write_lock);
    return 0;
}
