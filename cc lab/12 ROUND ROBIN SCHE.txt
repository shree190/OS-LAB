12. Round Robin Scheduling
This code demonstrates round-robin scheduling with a fixed time quantum.
c
Copy code
#include <stdio.h>

struct Process {
    int id, burst_time, remaining_time, waiting_time, turnaround_time;
};

void roundRobin(struct Process p[], int n, int quantum) {
    int time = 0, done;
    do {
        done = 1;
        for (int i = 0; i < n; i++) {
            if (p[i].remaining_time > 0) {
                done = 0;
                if (p[i].remaining_time > quantum) {
                    time += quantum;
                    p[i].remaining_time -= quantum;
                } else {
                    time += p[i].remaining_time;
                    p[i].waiting_time = time - p[i].burst_time;
                    p[i].turnaround_time = time;
                    p[i].remaining_time = 0;
                }
            }
        }
    } while (!done);
}

int main() {
    int n, quantum;
    printf("Enter number of processes and time quantum: ");
    scanf("%d %d", &n, &quantum);
    struct Process p[n];

    for (int i = 0; i < n; i++) {
        printf("Enter burst time for process %d: ", i + 1);
        scanf("%d", &p[i].burst_time);
        p[i].id = i + 1;
        p[i].remaining_time = p[i].burst_time;
    }

    roundRobin(p, n, quantum);
    printf("Process\tBurst Time\tWaiting Time\tTurnaround Time\n");
    for (int i = 0; i < n; i++) {
        printf("%d\t%d\t\t%d\t\t%d\n", p[i].id, p[i].burst_time, p[i].waiting_time, p[i].turnaround_time);
    }

    return 0;
}

