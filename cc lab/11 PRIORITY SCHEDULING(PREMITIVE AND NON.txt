11. Priority Scheduling (Preemptive and Non-Preemptive)
This example demonstrates non-preemptive priority scheduling.
c
Copy code
#include <stdio.h>

struct Process {
    int id, burst_time, priority, waiting_time, turnaround_time;
};

void calculateTimes(struct Process p[], int n) {
    int complete = 0, time = 0, min_priority, highest;
    int finished[n];
    for (int i = 0; i < n; i++) finished[i] = 0;

    while (complete < n) {
        min_priority = 9999;
        highest = -1;
        for (int i = 0; i < n; i++) {
            if (!finished[i] && p[i].priority < min_priority) {
                min_priority = p[i].priority;
                highest = i;
            }
        }

        time += p[highest].burst_time;
        p[highest].waiting_time = time - p[highest].burst_time;
        p[highest].turnaround_time = time;
        finished[highest] = 1;
        complete++;
    }
}

int main() {
    int n;
    printf("Enter number of processes: ");
    scanf("%d", &n);
    struct Process p[n];

    for (int i = 0; i < n; i++) {
        printf("Enter burst time and priority for process %d: ", i + 1);
        scanf("%d%d", &p[i].burst_time, &p[i].priority);
        p[i].id = i + 1;
    }

    calculateTimes(p, n);
    printf("Process\tBurst Time\tPriority\tWaiting Time\tTurnaround Time\n");
    for (int i = 0; i < n; i++) {
        printf("%d\t%d\t\t%d\t\t%d\t\t%d\n", p[i].id, p[i].burst_time, p[i].priority, p[i].waiting_time, p[i].turnaround_time);
    }

    return 0;
}
