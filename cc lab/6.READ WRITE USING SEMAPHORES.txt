6. Reader-Writer Problem Using Threads and Semaphores

This program implements the reader-writer problem using semaphores.

#include <stdio.h>
#include <pthread.h>
#include <semaphore.h>
#include <unistd.h>

sem_t rw_mutex, mutex;
int read_count = 0;

void* reader(void* arg) {
    int num = *((int*)arg);

    sem_wait(&mutex);
    read_count++;
    if (read_count == 1) 
        sem_wait(&rw_mutex); // First reader locks the resource
    sem_post(&mutex);

    printf("Reader %d is reading\n", num);
    sleep(1);

    sem_wait(&mutex);
    read_count--;
    if (read_count == 0) 
        sem_post(&rw_mutex); // Last reader unlocks the resource
    sem_post(&mutex);
    return NULL;
}

void* writer(void* arg) {
    int num = *((int*)arg);

    sem_wait(&rw_mutex);
    printf("Writer %d is writing\n", num);
    sleep(1);
    sem_post(&rw_mutex);
    return NULL;
}

int main() {
    pthread_t readers[5], writers[5];
    sem_init(&rw_mutex, 0, 1);
    sem_init(&mutex, 0, 1);

    int ids[5];
    for (int i = 0; i < 5; i++) {
        ids[i] = i + 1;
        pthread_create(&readers[i], NULL, reader, &ids[i]);
        pthread_create(&writers[i], NULL, writer, &ids[i]);
    }

    for (int i = 0; i < 5; i++) {
        pthread_join(readers[i], NULL);
        pthread_join(writers[i], NULL);
    }

    sem_destroy(&rw_mutex);
    sem_destroy(&mutex);
    return 0;
}
